<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team.mapper.FeedbackMapper">

	<insert id="insertFeedback" parameterType="Feedback">
	INSERT INTO feedback(content, sender, workspace_no, opened)
	VALUES (#{content}, #{sender}, #{workspaceNo}, #{opened})
		<selectKey keyProperty="feedbackNo" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID();
		</selectKey>
	</insert>

	<insert id="insertFeedbackReceivers" parameterType="java.util.List">
	INSERT INTO feedback_receiver(feedback_no, email) VALUES
		<foreach collection="list" item="feedbackReceiver" index="index" separator=",">
			(#{feedbackReceiver.feedbackNo}, #{feedbackReceiver.email})
			<!-- <if test="index != list.size - 1"> , </if> -->
		</foreach>
	</insert>
	
	<insert id="insertComment" parameterType="Comments">
	INSERT INTO comments(feedback_no, content, writer) 
	VALUES (#{feedbackNo}, #{content}, #{writer})
	</insert>
	
	<select id="selectFeedback" parameterType="hashmap" resultMap="feedbackMap">
	SELECT * FROM feedback f
	INNER JOIN feedback_receiver r ON f.feedback_no = r.feedback_no
	WHERE 
		<choose>
			<when test="searchType == 'M'.toString()">
				(sender = #{email} OR email = #{email}) AND
			</when>
			<when test="searchType == 'S'.toString()">
				sender = #{email} AND
			</when>
			<when test="searchType == 'R'.toString()">
				email = #{email} AND
			</when>
			<when test="searchType == 'A'.toString()">
				email = #{email} AND opened = 1 AND
			</when>
			<when test="searchType == 'I'.toString()">
			(sender LIKE CONCAT('%',#{key},'%') OR 
			email LIKE CONCAT('%',#{key},'%') OR 
			f.content LIKE CONCAT('%',#{key},'%') ) AND
			</when>
		</choose>
	deleted = '0' AND workspace_no = #{workspaceNo}
	ORDER BY f.feedback_no DESC
	</select>
	
	<select id="selectComments" parameterType="int" resultMap="commentMap">
	SELECT * FROM comments WHERE feedback_no = #{feedback_no}
	ORDER BY comment_no DESC
	</select>
	
	<select id="countFeedback" parameterType="hashmap" resultType="int">
	SELECT COUNT(*) FROM feedback_receiver r
	INNER JOIN feedback f
	ON f.feedback_no = r.feedback_no
	WHERE email = #{email} AND workspace_no = #{workspaceNo}
	AND checked = 0 AND deleted = 0
	</select>
	
	<select id="selectLatestWritedate" parameterType="hashmap" resultType="java.util.Date">
	SELECT writedate FROM feedback
	WHERE feedback_no = (
		SELECT MAX(feedback_no) FROM feedback_receiver
		WHERE email = #{email} AND checked = 0 AND workspace_no = #{workspaceNo}
	)
	</select>

	<update id="deleteFeedback" parameterType="hashmap">
	UPDATE feedback_receiver SET deleted = 1
	WHERE feedback_no = #{feedbackNo}
	</update>
	
	<update id="checkFeedback" parameterType="hashmap">
	UPDATE feedback_receiver SET checked = 1
	WHERE feedback_no = #{feedbackNo} AND email = #{email}
	</update>
	

	<resultMap type="Feedback" id="feedbackMap">
		<id column="feedback_no" property="feedbackNo"/>
		<result column="content" property="content"/>
		<result column="writedate" property="writedate"/>
		<result column="sender" property="sender"/>
		<result column="workspace_no" property="workspaceNo"/>
		<result column="opened" property="opened"/>
		<result column="task_no" property="taskNo"/>
		<collection property="receivers" column="feedback_no" resultMap="feedbackReceiverMap" />
	</resultMap>
	
	<resultMap type="FeedbackReceiver" id="feedbackReceiverMap">
		<result column="feedback_no" property="feedbackNo"/>
		<result column="email" property="email"/>
		<result column="checked" property="checked"/>
		<result column="deleted" property="deleted"/>
	</resultMap>
	
	<resultMap type="Comments" id="commentMap">
		<id column="comment_no" property="commentNo"/>
		<result column="feedback_no" property="feedbackNo"/>
		<result column="writer" property="writer"/>
		<result column="content" property="content"/>
		<result column="writedate" property="writedate"/>
	</resultMap>
</mapper>























